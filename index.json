[{"content":" Maximum Depth of Binary Tree Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. Example 1: Input: nums = [1,2,3,1] Output: true Example 2: Input: nums = [1,2,3,4] Output: false Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true class Solution(object): def containsDuplicate(self, nums): s = set() for num in nums: if num in s: return True s.add(num) return False ","permalink":"https://zhengshutao.github.io/posts/lh_array/","summary":"Maximum Depth of Binary Tree Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. Example 1: Input: nums = [1,2,3,1] Output: true Example 2: Input: nums = [1,2,3,4] Output: false Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true class Solution(object): def containsDuplicate(self, nums): s = set() for num in nums: if num in s: return True s.add(num) return False","title":"LeetCode - Array"},{"content":" Maximum Depth of Binary Tree Given the root of a binary tree, return its maximum depth. A binary tree\u0026#39;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Example 2: Input: root = [1,null,2] Output: 2 class Solution(object): def maxDepth(self, root): if root == None: return 0 else: return 1 + max(self.maxDepth(root.left),self.maxDepth(root.right)) Binary Tree Preorder Traversal Given the root of a binary tree, return the preorder traversal of its nodes\u0026#39; values. Example 1: Input: root = [1,null,2,3] Output: [1,2,3] Example 2: Input: root = [] Output: [] Example 3: Input: root = [1] Output: [1] class Solution(object): def preorderTraversal(self, root): if root == None: return [] nums = [root.val] nums += self.preorderTraversal(root.left) nums += self.preorderTraversal(root.right) return nums Maximum Depth of Binary Tree Given the root of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them. Example 1: Input: root = [1,2,3,4,5] Output: 3 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]. Example 2: Input: root = [1,2] Output: 1 class Solution(object): def diameterOfBinaryTree(self, root): max_d = [0] def dfs(root): if root is None: return 0 left_height = dfs(root.left) right_height = dfs(root.right) result = 1 + max(left_height, right_height) max_d[0] = max(max_d[0], left_height + right_height) return result dfs(root) return max_d[0] Serialize and Deserialize Binary Tree Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. Example 1: Input: root = [1,2,3,null,null,4,5] Output: [1,2,3,null,null,4,5] Example 2: Input: root = [] Output: [] class Codec: def serialize(self, root): if root == None: return \u0026#34;*\u0026#34; return str(root.val) + \u0026#34;,\u0026#34; + self.serialize(root.left) + \u0026#34;,\u0026#34; + self.serialize(root.right) def deserialize(self, data): data = data.split(\u0026#34;,\u0026#34;) def formTree(): num = data.pop(0) if num == \u0026#34;*\u0026#34;: return None root = TreeNode(int(num)) root.left = formTree() root.right = formTree() return root return formTree() ","permalink":"https://zhengshutao.github.io/posts/lh_tree/","summary":"Maximum Depth of Binary Tree Given the root of a binary tree, return its maximum depth. A binary tree\u0026#39;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Example 2: Input: root = [1,null,2] Output: 2 class Solution(object): def maxDepth(self, root): if root == None: return 0 else: return 1 + max(self.maxDepth(root.left),self.maxDepth(root.right)) Binary Tree Preorder Traversal Given the root of a binary tree, return the preorder traversal of its nodes\u0026#39; values. Example 1: Input: root = [1,null,2,3] Output: [1,2,3] Example 2: Input: root = [] Output: [] Example 3: Input: root = [1] Output: [1] class Solution(object): def preorderTraversal(self, root): if root == None: return [] nums = [root.val] nums += self.preorderTraversal(root.left) nums += self.preorderTraversal(root.right) return nums Maximum Depth of","title":"LeetCode - Tree"},{"content":"Projects Anti-Chess (Python, Git) Developed a Chess game using Python, utilizing object-oriented design techniques for implementation. Implemented the Minimax algorithm with Alpha-Beta Pruning, resulting in a win rate of 85% against classmates. Incorporated various design patterns, such as abstract classes, to mimic various Chess-gaming functionalities and improve the overall game experience. Collaborated with teammates through constant communication and code reviews to deliver a high-quality project on time. Text Adventure Game (Python, Git) Developed a captivating text-based adventure game with various challenges and choices for players. Utilized file input and output to enable save functionality, allowing players to pick up where they left off and continue their journey at a later time. Employed object-oriented programming concepts for a structured and organized approach to development. Escape From The Maze Game (C, Git) Utilized my knowledge of the right-hand rule wall follower algorithm to implement path-finding ","permalink":"https://zhengshutao.github.io/posts/ug_project/","summary":"Projects Anti-Chess (Python, Git) Developed a Chess game using Python, utilizing object-oriented design techniques for implementation. Implemented the Minimax algorithm with Alpha-Beta Pruning, resulting in a win rate of 85% against classmates. Incorporated various design patterns, such as abstract classes, to mimic various Chess-gaming functionalities and improve the overall game experience. Collaborated with teammates through constant communication and code reviews to deliver a high-quality project on time. Text Adventure Game (Python, Git) Developed a captivating text-based adventure game with various challenges and choices for players. Utilized file input and output to enable save functionality, allowing players to pick up where they left off and continue their journey at a later time. Employed object-oriented programming concepts for a structured and organized approach to development. Escape From The Maze Game (C, Git) Utilized my knowledge of the right-hand rule wall follower algorithm","title":"Project"},{"content":"Undergrad Education University of Waterloo | Sept. 2018 - Present | Expected graduation in August 2023 Major \u0026amp; Minors Computational Mathematics Major Combinatorics and Optimization Minor Computing Minor Contact Information +1 (416) 801 - 5771 stzheng@uwaterloo.ca Qualifications Proficient in Python, C/C++, PHP, JavaScript/HTML/CSS/Node.js, Linux/Unix and R Indicated capacity to complete research, information management and reporting efficiently Strong knowledge of data structures, algorithms, Object-Oriented programming and multi-threaded programming through coursework and work experience. Experience Junior Software Engineer/Quality Assurance Engineer | AEC Daily Inc | Jan. 2023 - Apr. 2023 Conducted manual testing for a company website, utilizing a black box testing methodology to ensure functionality and identify potential issues. Collaborated with developers to implement solutions to identified issues and contributed to the development of new website features using PHP, Smarty, HTML, and CSS. Successfully identified and reported a high number of bugs and defects in web applications, contributing to the overall improvement of the product. Software Engineer | Lifion by ADP | May 2022 - Aug. 2022 Successfully redesigned and implemented new features on an internal flowchart application using Node.js, resulting in improved output information for users. Developed new logic operators for the internal flowchart application, increasing its functionality for users. Implemented integration testing using Jenkins, covering over 90% of the new functionality in the application. Quality Assurance Engineer | NetDragon Websoft Holdings Limited | Sept. 2020 - Aug. 2021 Developed an automated test system for ActivPanel by Promethean, an educational interactive display used in over 1 million classrooms worldwide. Developed a test workflow that supports more efficient test case management, automated risk assessment, and test reports generation. The system ensured three successful product launches. Projects Anti-Chess (Python, Git) Developed a Chess game using Python, utilizing object-oriented design techniques for implementation. Implemented the Minimax algorithm with Alpha-Beta Pruning, resulting in a win rate of 85% against classmates. Incorporated various design patterns, such as abstract classes, to mimic various Chess-gaming functionalities and improve the overall game experience. Collaborated with teammates through constant communication and code reviews to deliver a high-quality project on time. Text Adventure Game (Python, Git) Developed a captivating text-based adventure game with various challenges and choices for players. Utilized file input and output to enable save functionality, allowing players to pick up where they left off and continue their journey at a later time. Employed object-oriented programming concepts for a structured and organized approach to development. Escape From The Maze Game (C, Git) Utilized my knowledge of the right-hand rule wall follower algorithm to implement path-finding Relevant Courses Object-Oriented Software Development Algorithms(Binary search, Dynamic programming, Two pointers, Sliding Window, Hashing) Data Structures Data Management ","permalink":"https://zhengshutao.github.io/resume/","summary":"Undergrad Education University of Waterloo | Sept. 2018 - Present | Expected graduation in August 2023 Major \u0026amp; Minors Computational Mathematics Major Combinatorics and Optimization Minor Computing Minor Contact Information +1 (416) 801 - 5771 stzheng@uwaterloo.ca Qualifications Proficient in Python, C/C++, PHP, JavaScript/HTML/CSS/Node.js, Linux/Unix and R Indicated capacity to complete research, information management and reporting efficiently Strong knowledge of data structures, algorithms, Object-Oriented programming and multi-threaded programming through coursework and work experience. Experience Junior Software Engineer/Quality Assurance Engineer | AEC Daily Inc | Jan. 2023 - Apr. 2023 Conducted manual testing for a company website, utilizing a black box testing methodology to ensure functionality and identify potential issues. Collaborated with developers to implement solutions to identified issues and contributed to the development of new website features using PHP, Smarty, HTML, and CSS. Successfully identified and reported a high number of","title":"Resume"},{"content":"class Me: def __init__(self): self.name = \u0026#34;ShuTao Zheng\u0026#34; self.hometown = \u0026#34;FuZhou, FuJian, China\u0026#34; self.undergrad_school = \u0026#34;uWaterloo\u0026#34; self.graduation_time = 2023 self.curr_location = \u0026#34;Waterloo, ON, Canada\u0026#34; ","permalink":"https://zhengshutao.github.io/about/","summary":"class Me: def __init__(self): self.name = \u0026#34;ShuTao Zheng\u0026#34; self.hometown = \u0026#34;FuZhou, FuJian, China\u0026#34; self.undergrad_school = \u0026#34;uWaterloo\u0026#34; self.graduation_time = 2023 self.curr_location = \u0026#34;Waterloo, ON, Canada\u0026#34;","title":"🙋🏻‍♂️About"}]